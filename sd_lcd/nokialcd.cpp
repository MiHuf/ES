#include "nokialcd.h"
#include <Arduino.h>
#include <SPI.h>

unsigned char font[95][6] =
{
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // space
{ 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00 }, // !
{ 0x00, 0x07, 0x00, 0x07, 0x00, 0x00 }, // "
{ 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00 }, // #
{ 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00 }, // $
{ 0x23, 0x13, 0x08, 0x64, 0x62, 0x00 }, // %
{ 0x36, 0x49, 0x55, 0x22, 0x50, 0x00 }, // &
{ 0x00, 0x00, 0x07, 0x00, 0x00, 0x00 }, // '
{ 0x00, 0x1C, 0x22, 0x41, 0x00, 0x00 }, // (
{ 0x00, 0x41, 0x22, 0x1C, 0x00, 0x00 }, // )
{ 0x0A, 0x04, 0x1F, 0x04, 0x0A, 0x00 }, // *
{ 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00 }, // +
{ 0x00, 0x50, 0x30, 0x00, 0x00, 0x00 }, // ,
{ 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 }, // -
{ 0x00, 0x60, 0x60, 0x00, 0x00, 0x00 }, // .
{ 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 }, // slash
{ 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00 }, // 0
{ 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00 }, // 1
{ 0x42, 0x61, 0x51, 0x49, 0x46, 0x00 }, // 2
{ 0x21, 0x41, 0x45, 0x4B, 0x31, 0x00 }, // 3
{ 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00 }, // 4
{ 0x27, 0x45, 0x45, 0x45, 0x39, 0x00 }, // 5
{ 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00 }, // 6
{ 0x03, 0x71, 0x09, 0x05, 0x03, 0x00 }, // 7
{ 0x36, 0x49, 0x49, 0x49, 0x36, 0x00 }, // 8
{ 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00 }, // 9
{ 0x00, 0x36, 0x36, 0x00, 0x00, 0x00 }, // :
{ 0x00, 0x56, 0x36, 0x00, 0x00, 0x00 }, // ;
{ 0x08, 0x14, 0x22, 0x41, 0x00, 0x00 }, // <
{ 0x14, 0x14, 0x14, 0x14, 0x14, 0x00 }, // =
{ 0x00, 0x41, 0x22, 0x14, 0x08, 0x00 }, // >
{ 0x02, 0x01, 0x51, 0x09, 0x06, 0x00 }, // ?
{ 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00 }, // @
{ 0x7E, 0x11, 0x11, 0x11, 0x7E, 0x00 }, // A
{ 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00 }, // B
{ 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00 }, // C
{ 0x7F, 0x41, 0x41, 0x41, 0x3E, 0x00 }, // D
{ 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00 }, // E
{ 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00 }, // F
{ 0x3E, 0x41, 0x41, 0x49, 0x7A, 0x00 }, // G
{ 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00 }, // H
{ 0x00, 0x41, 0x7F, 0x41, 0x00, 0x00 }, // I
{ 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00 }, // J
{ 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00 }, // K
{ 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00 }, // L
{ 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00 }, // M
{ 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00 }, // N
{ 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00 }, // O
{ 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00 }, // P
{ 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00 }, // Q
{ 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00 }, // R
{ 0x26, 0x49, 0x49, 0x49, 0x32, 0x00 }, // S
{ 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00 }, // T
{ 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00 }, // U
{ 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00 }, // V
{ 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00 }, // W
{ 0x63, 0x14, 0x08, 0x14, 0x63, 0x00 }, // X
{ 0x07, 0x08, 0x70, 0x08, 0x07, 0x00 }, // Y
{ 0x61, 0x51, 0x49, 0x45, 0x43, 0x00 }, // Z
{ 0x00, 0x7F, 0x41, 0x41, 0x00, 0x00 }, // [
{ 0x02, 0x04, 0x08, 0x10, 0x20, 0x00 }, // backslash
{ 0x00, 0x41, 0x41, 0x7F, 0x00, 0x00 }, // ]
{ 0x04, 0x02, 0x01, 0x02, 0x04, 0x00 }, // ^
{ 0x40, 0x40, 0x40, 0x40, 0x40, 0x00 }, // _
{ 0x00, 0x01, 0x02, 0x04, 0x00, 0x00 }, // `
{ 0x20, 0x54, 0x54, 0x54, 0x78, 0x00 }, // a
{ 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00 }, // b
{ 0x38, 0x44, 0x44, 0x44, 0x20, 0x00 }, // c
{ 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00 }, // d
{ 0x38, 0x54, 0x54, 0x54, 0x18, 0x00 }, // e
{ 0x08, 0x7E, 0x09, 0x01, 0x02, 0x00 }, // f
{ 0x08, 0x54, 0x54, 0x54, 0x3C, 0x00 }, // g
{ 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00 }, // h
{ 0x00, 0x48, 0x7D, 0x40, 0x00, 0x00 }, // i
{ 0x20, 0x40, 0x44, 0x3D, 0x00, 0x00 }, // j
{ 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00 }, // k
{ 0x00, 0x41, 0x7F, 0x40, 0x00, 0x00 }, // l
{ 0x7C, 0x04, 0x78, 0x04, 0x78, 0x00 }, // m
{ 0x7C, 0x08, 0x04, 0x04, 0x78, 0x00 }, // n
{ 0x38, 0x44, 0x44, 0x44, 0x38, 0x00 }, // o
{ 0x7C, 0x14, 0x14, 0x14, 0x08, 0x00 }, // p
{ 0x08, 0x14, 0x14, 0x18, 0x7C, 0x00 }, // q
{ 0x7C, 0x08, 0x04, 0x04, 0x08, 0x00 }, // r
{ 0x48, 0x54, 0x54, 0x54, 0x20, 0x00 }, // s
{ 0x04, 0x3F, 0x44, 0x40, 0x20, 0x00 }, // t
{ 0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00 }, // u
{ 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00 }, // v
{ 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00 }, // w
{ 0x44, 0x28, 0x10, 0x28, 0x44, 0x00 }, // x
{ 0x0C, 0x50, 0x50, 0x50, 0x3C, 0x00 }, // y
{ 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00 }, // z
{ 0x00, 0x08, 0x36, 0x41, 0x00, 0x00 }, // {
{ 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00 }, // |
{ 0x00, 0x41, 0x36, 0x08, 0x00, 0x00 }, // }
{ 0x10, 0x08, 0x08, 0x10, 0x08, 0x00 } // ~
};

NokiaLCD::NokiaLCD() {}

void NokiaLCD::init(uint8_t pinSCE, uint8_t pinRES, uint8_t pinDC)
{
  pinSCE_ = pinSCE;
  pinDC_ = pinDC;
  
  // Reset the display
  pinMode(pinRES, OUTPUT);
  digitalWrite(pinRES, LOW);
  delay(500);
  digitalWrite(pinRES, HIGH);
  
  // Initialize data/command mode (HIGH -> data, LOW -> command)
  pinMode(pinDC_, OUTPUT);
  digitalWrite(pinDC_, HIGH);
  
  // Initialize serial peripheral interface
  SPI.begin(pinSCE_);
  SPI.setClockDivider(pinSCE_, 84);  // 1MHz frequency on the Arduino Due
  SPI.setBitOrder(pinSCE_, MSBFIRST);
  
  // Perform display initialization
  writeCommand(0x21); // FUNCTION SET (EXTENDED)
  writeCommand(0x14); // BIAS
  writeCommand(0xB0); // CONTRAST
  writeCommand(0x20); // FUNCTION SET (NORMAL)
  writeCommand(0x0C); // DISPLAY NORMAL
  writeCommand(0x40); // SET Y = 0;
  writeCommand(0x80); // SET X = 0;
}

/*
 * De-/activate the pixel at the given coordinates
 */
bool NokiaLCD::setPixel(uint8_t pX, uint8_t pY, uint8_t onoff)
{
  bool result = true;
  // Validate argument values
  if (pX < LCD_RESX && pY < LCD_RESY && onoff < 2)
  {
    // Determine the display column (byte in the buffer)
    uint16_t column = (pY/8) * LCD_RESX + pX;
    // Determine the bit position corresponding to the pixel
    uint8_t bitpos = pY%8;
    // De-/activate the pixel
    if (!onoff) { buffer[column] = buffer[column] & ~(0x01 << bitpos);}
    else { buffer[column] = buffer[column] | (0x01 << bitpos); }
  }
  else { result = false; }
  return result;
}

/*
 * Write a character at the given position (if possible)
 */
bool NokiaLCD::writeChar(uint8_t pX, uint8_t pY, const char ch)
{
  bool result = true;
  // Validate argument values
  if (pX < LCD_RESX - 6 && pY < LCD_RESY - 8 && ch >= 0x20 && ch <= 0x7E)
  {
    // Determine the row index for the font array
    uint8_t row = ch - 0x20;
    for (uint8_t i = 0; i < 6; i++)
    {
      // Retrieve character bytes from the font array
      uint8_t fch = font[row][i];
      for (uint8_t j = 0; j < 8; j++)
      {
        // Set all corresponding pixels
        setPixel(pX + i, pY + j, (fch >> j) & 0x01);
      }
    }
  }
  else { result = false; }
  return result;
}

/*
 * Write a line (string) at the given position
 */
bool NokiaLCD::writeLine(uint8_t pX, uint8_t pY, const char *str)
{
  bool result = true;
  for (uint8_t i = 0; i < strlen(str); i++)
  {
    // Write each character of the given string
    if (!writeChar(pX, pY, str[i]))
    {
      result = false;
      break;
    }
    pX += 6;
  }
  return result;
}

/*
 * Clear the display buffer
 */
void NokiaLCD::clearBuffer() { memset(buffer, 0, LCD_BUFSIZE); }

/*
 * Write the contents of the buffer to the display
 */
void NokiaLCD::displayBuffer()
{
  writeCommand(0x40); // Set bank address to 0 (Y)
  writeCommand(0x80); // Set column address to 0 (X)
  
  uint8_t *ptr = buffer;
  for (int i = 0; i < LCD_BUFSIZE; i++) { writeData(*ptr++); }
}

/*
 * Writes a command byte to the display, pinDC -> LOW
 */
void NokiaLCD::writeCommand(uint8_t cmd)
{
  digitalWrite(pinDC_, LOW);
  SPI.transfer(pinSCE_, cmd);
}

/*
 * Writes a data byte to the display, pinDC -> HIGH
 */
void NokiaLCD::writeData(uint8_t data)
{
  digitalWrite(pinDC_, HIGH);
  SPI.transfer(pinSCE_, data);
}
